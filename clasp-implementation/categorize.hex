% import labels with ranks for each object

label_prob(X,L,P) :- object(X), &predictProb["temp/test/model.pkl",X,25,12,prob,d](Y,P), label(Y,L).

assigned_label_prob(X,L,P) :- label_prob(X,L,P), not n_assigned_label_prob(X,L,P).
n_assigned_label_prob(X,L,P) :- label_prob(X,L,P), not assigned_label_prob(X,L,P).

:- #count{L : assigned_label_prob(X,L,P)} != 1, object(X).

:~ assigned_label_prob(X,L,P). [P@1,X,L]


% further filter ranking minimal solutions:

%label_log_prob(X,L,P) :- object(X), &predictProb["temp/test/model.pkl",X,15,12,logprob](Y,P), label(Y,L).
%:~ assigned_label_prob(X,L,_), label_log_prob(X,L,P). [P@1,X,L]

assigned_label(X,L) :- assigned_label_prob(X,L,P).


%%% IMPORT FROM SPATIAL MODULE %%%

contains(X1,X2) :- &spatial[X1,X2,S,5](contains), object(X1), object(X2), scene(S), X1 != X2.
contains_bottom(X1,X2) :- &spatial[X1,X2,S,5](contains_bottom), object(X1), object(X2), scene(S), X1 != X2.
higher(X1,X2) :- &spatial[X1,X2,S,0](higher), object(X1), object(X2), scene(S), X1 != X2.


%%% IMPORT FROM ONTOLOGY %%%

small_object(L) :- &cDL["ontology.owl",a,b,c,d,"SmallObject"](X), label_string(X,L).
large_object(L) :- &cDL["ontology.owl",a,b,c,d,"LargeObject"](X), label_string(X,L).
midsized_object(L) :- &cDL["ontology.owl",a,b,c,d,"MidsizedObject"](X), label_string(X,L).
car_part(L) :- &cDL["ontology.owl",a,b,c,d,"CarPart"](X), label_string(X,L).


%%% CONTAINMENT CONSTRAINTS %%%

% a window is contained in a car or a building:

:~ assigned_label(X,wi), not in_window_position(X). [1@2,X]
in_window_position(X2) :- contains(X1,X2), not contains_bottom(X1,X2), assigned_label(X1,c).
in_window_position(X2) :- contains(X1,X2), assigned_label(X1,b).


% a wheel is contained in a car:

:~ assigned_label(X,wh), not in_wheel_position(X). [1@2,X]
in_wheel_position(X2) :- contains_bottom(X1,X2), assigned_label(X1,c).


% a trunk is part of a tree:

:~ assigned_label(X,trn), not in_trunk_position(X). [1@2,X]
:~ not assigned_label(X,trn), in_trunk_position(X). [1@2,X]
in_trunk_position(X2) :- contains(X1,X2), assigned_label(X1,tr).


% a car contains a carpart:

:~ assigned_label(X,c), not contains_car_part(X). [1@2,X]
contains_car_part(X1) :- contains(X1,X2), assigned_label(X2,L), car_part(L).


%%% NUMBER CONSTRAINTS %%%

% there is at most one sky:

:~ assigned_label(X1,sk), assigned_label(X2,sk), X1 != X2. [1@2,X1,X2]


%%% SIZE CONSTRAINTS %%%

:~ higher(X1,X2), assigned_label(X1,L1), assigned_label(X2,L2), small_object(L1), large_object(L2), X1 != X2. [1@2,X1,X2,L1,L2]

:~ higher(X1,X2), assigned_label(X1,L1), assigned_label(X2,L2), midsized_object(L1), large_object(L2), X1 != X2. [1@2,X1,X2,L1,L2]

:~ higher(X1,X2), assigned_label(X1,L1), assigned_label(X2,L2), small_object(L1), midsized_object(L2), X1 != X2. [1@2,X1,X2,L1,L2]






